from loader import bot
from states.states import UserState
from telebot.types import Message
import os
from utils.misc.algorithms import get_html
from config_data.config import uploads_path
from utils.misc import clear_uploads, error_handler
from loguru import logger


@bot.message_handler(commands=["HTML"])
def main(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã HTML.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–û–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏".
    :param message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–º–∞–Ω–¥–∞)
    """
    logger.info(f'{message.from_user.id}: /HTML')

    bot.send_message(message.from_user.id,
                     "ü§ñ–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É\n"
                     "\n‚ùó‚ùó‚ùóÔ∏è–ü–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–ª–∏ XSS‚ùó‚ùó‚ùó")
    bot.set_state(message.from_user.id, UserState.waiting_link, message.chat.id)


@bot.message_handler(state=UserState.waiting_link)
def waiting_link(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏
    :param message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    logger.info(f'{message.from_user.id}: waiting_link({message.text})')

    url = message.text
    html_content = get_html(url)
    if html_content:
        file_path = os.path.join(f'{uploads_path}/{message.from_user.id}', 'your_code.html')
        try:
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(html_content)
            logger.debug(f'waiting_link({url}) : saved')
        except IOError:
            error_handler.main(message, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
        with open(file_path, 'rb') as file:
            bot.send_document(message.chat.id, file)
        logger.info(f'send_document: {message.from_user.id}: your_code.html')
        bot.set_state(message.from_user.id, None, message.chat.id)
        clear_uploads.main(message.from_user.id)

    else:
        error_handler.main(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
