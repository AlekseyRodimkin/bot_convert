from keyboards.reply.contact import pdf_to_target
from loader import bot
from states.states import UserState
from telebot.types import Message, ReplyKeyboardRemove
from Exeptions.exeptions_classes import FileFormatError
import os
from handlers.custom_handlers.algorithms import pdf_to_docx, pdf_to_book
from handlers.custom_handlers.errors import clearing_uploads, handle_error

uploads_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../uploads'))

FORMAT_ACTIONS = {
    'docx': pdf_to_docx,
    'mp3': pdf_to_book
}


@bot.message_handler(commands=["PDF"])
def pdf_to(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ pdf.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–û–∂–∏–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞".
    """
    bot.send_message(
        message.from_user.id,
        "docx - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ word –¥–æ–∫—É–º–µ–Ω—Ç\n"
        "mp3 - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∞—É–¥–∏–æ –∫–Ω–∏–≥—É\n"
        "\n–í –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF —Ñ–∞–π–ª",
        reply_markup=pdf_to_target()
    )
    bot.set_state(message.from_user.id, UserState.waiting_target_format, message.chat.id)


@bot.message_handler(state=UserState.waiting_target_format)
def waiting_target_format(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    """
    target_format = message.text[1:]
    if target_format not in FORMAT_ACTIONS:
        return handle_error(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ PDF –∏–ª–∏ MP3.")

    bot.send_message(
        message.from_user.id,
        f"ü§ñ–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ {target_format}",
        reply_markup=ReplyKeyboardRemove()
    )
    bot.set_state(message.from_user.id, UserState.waiting_file_pdf, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["user_id"] = message.from_user.id
        data["target_format"] = target_format


@bot.message_handler(content_types=['document'], state=UserState.waiting_file_pdf)
def handle_docs_photo(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞.
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    """
    try:
        src = save_downloaded_file(message.document)
        user_id = message.from_user.id
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            target_format = data.get('target_format')

        if not validate_file_format(message.document.file_name):
            raise FileFormatError()

        bot.reply_to(message, "ü§ñ–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é...")
        new_filename = os.path.join(uploads_path, f'your_new_file.{target_format}')
        conversion_function = FORMAT_ACTIONS.get(target_format)

        if conversion_function(src, new_filename):
            bot.send_document(message.chat.id, open(new_filename, 'rb'))
        else:
            handle_error(message, "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    except FileFormatError:
        handle_error(message, "–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")

    finally:
        bot.set_state(message.from_user.id, None, message.chat.id)
        clearing_uploads()


def save_downloaded_file(document) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    file_info = bot.get_file(document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    src = os.path.join(uploads_path, document.file_name)

    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file)

    return src


def validate_file_format(filename: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    """
    return filename.endswith('pdf')
