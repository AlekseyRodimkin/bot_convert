from loader import bot
from telebot.types import Message, ReplyKeyboardRemove
from utils.misc.algorithms import pdf_to_docx, pdf_to_audio
from handlers import error_handler
from config_data.config import uploads_path
from loguru import logger
import os
from handlers.handler_decorator import command_handler
from states.states import UserState


def save_uploaded_file(document, user_id: int) -> str or None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –ø—É—Ç—å."""
    try:
        file_info = bot.get_file(document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        user_path = os.path.join(uploads_path, str(user_id))
        os.makedirs(user_path, exist_ok=True)

        file_path = os.path.join(user_path, document.file_name)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        logger.info(f'–§–∞–π–ª {document.file_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.')
        return file_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None


@bot.message_handler(commands=["PDF"])
@command_handler()
def pdf_main(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã PDF. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞."""
    logger.info(f'{message.from_user.id}: /PDF')
    bot.send_message(
        message.from_user.id,
        "ü§ñ–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
        "/docx - PDF –≤ Word –¥–æ–∫—É–º–µ–Ω—Ç\n"
        "/mp3 - PDF –≤ –∞—É–¥–∏–æ–∫–Ω–∏–≥—É\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        reply_markup=ReplyKeyboardRemove()
    )
    bot.set_state(message.from_user.id, UserState.waiting_target_format, message.chat.id)


@bot.message_handler(state=UserState.waiting_target_format)
@command_handler(state_required=UserState.waiting_target_format)
def pdf_select_format(message: Message) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞."""
    logger.info(f'{message.from_user.id}: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - {message.text}')
    target_format = message.text.strip().lower()[1:]

    if target_format not in ["docx", "mp3"]:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ docx –∏–ª–∏ mp3.")
        return

    bot.send_message(message.from_user.id, f"ü§ñ–ü—Ä–∏—à–ª–∏—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ {target_format}.")
    bot.set_state(message.from_user.id, UserState.waiting_file_pdf, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["target_format"] = target_format


@bot.message_handler(content_types=["document"], state=UserState.waiting_file_pdf)
@command_handler(state_required=UserState.waiting_file_pdf)
def pdf_process_file(message: Message) -> None:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF-—Ñ–∞–π–ª–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    logger.info(f'{message.from_user.id}: –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª {message.document.file_name}')

    file_path = save_uploaded_file(message.document, message.from_user.id)
    if not file_path or not file_path.endswith(".pdf"):
        error_handler.main(message, "–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª.")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_format = data.get("target_format")

    output_path = os.path.join(uploads_path, str(message.from_user.id), f"converted.{target_format}")
    conversion_function = {"docx": pdf_to_docx, "mp3": pdf_to_audio}.get(target_format)

    if not conversion_function:
        error_handler.main(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
        return

    bot.reply_to(message, "ü§ñ–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ñ–∞–π–ª...\n")
    if conversion_function(file_path, output_path):
        with open(output_path, 'rb') as file:
            bot.send_document(message.chat.id, file)
            logger.info(f'{message.from_user.id}: –§–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
    else:
        error_handler.main(message, f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ {target_format}.")
