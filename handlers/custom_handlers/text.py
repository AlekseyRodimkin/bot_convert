from loader import bot
from telebot.types import Message
from utils.misc.algorithms import text_to_image, text_to_audio
from utils.misc import clear_uploads
from handlers import error_handler
from loguru import logger
from io import BytesIO
from handlers.handler_decorator import command_handler
from states.states import UserState

processors = {
    "art": (text_to_image, 'image'),
    "audio": (text_to_audio, 'audio')
}


def send_media(message, media: BytesIO, media_type: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ (–∞—É–¥–∏–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)."""
    try:
        if media_type == 'audio':
            bot.send_audio(message.chat.id, media, title='–ê—É–¥–∏–æ', performer='–í–∞—à–µ')
        elif media_type == 'image':
            bot.send_photo(chat_id=message.chat.id, photo=media)
    except Exception as e:
        logger.error(f"send_media({media_type}): {e}")
        error_handler.main(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {media_type}.")


def send_text_options(user_id: int):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥."""
    options_message = (
        "ü§ñ –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º:\n"
        "\n/art - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)\n"
        "\n/audio - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∞—É–¥–∏–æ"
    )
    bot.send_message(user_id, options_message)


def process_text_command(command, message: Message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º."""
    if command in processors:
        converter, media_type = processors[command]
        media = converter(message.text)

        if not media:
            error_handler.main(message, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {media_type}.")
        else:
            send_media(message, media, media_type)
    else:
        error_handler.main(message, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


@bot.message_handler(commands=["TEXT"])
@command_handler()
def text_main(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã TEXT."""
    logger.info(f'{message.from_user.id}: /TEXT')
    send_text_options(message.from_user.id)
    bot.set_state(message.from_user.id, UserState.waiting_action_text, message.chat.id)


@bot.message_handler(state=UserState.waiting_action_text)
@command_handler(state_required=UserState.waiting_action_text)
def waiting_action_text(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    if not processors.get(message.text[1:]):
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        send_text_options(message.from_user.id)
        return

    logger.info(f'{message.from_user.id}: waiting_action_text({message.text})')
    bot.set_state(message.from_user.id, UserState.waiting_text, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["command"] = message.text[1:]
    bot.send_message(message.from_user.id, "ü§ñ –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç (–ª–∞—Ç–∏–Ω–∏—Ü–∞)")


@bot.message_handler(state=UserState.waiting_text)
@command_handler(state_required=UserState.waiting_text)
def text_working(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞."""
    logger.info(f'{message.from_user.id}: {message.text}.')
    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            command = data.get("command")
            process_text_command(command, message)
    except Exception as e:
        logger.error(f'Error: {e}')
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        bot.set_state(message.from_user.id, None, message.chat.id)
        clear_uploads.main(message.from_user.id)
