from loader import bot
from states.states import UserState
from telebot.types import Message
import os
from utils.misc.algorithms import text_to_image, text_to_audio
from utils.misc import clear_uploads, error_handler
from loguru import logger
from io import BytesIO


def send_audio(message, audio: BytesIO):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ
    :param message: Message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param audio: BytesIO: –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å –∞—É–¥–∏–æ
    :return: None
    """
    try:
        bot.send_audio(message.chat.id, audio, title='–ê—É–¥–∏–æ', performer='TTS')
    except Exception as e:
        logger.error(f"send_audio(): {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ.")



def send_text_options(user_id: int):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
    :param user_id: int: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    bot.send_message(user_id, "ü§ñ–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º:\n"
                              "\n/art - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)\n"
                              "\n/audio - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∞—É–¥–∏–æ")


def send_image(message, file: BytesIO):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    :param message: Message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param file: BytesIO: –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    :return: None
    """
    try:
        bot.send_photo(chat_id=message.chat.id, photo=file)
    except Exception as e:
        logger.error(f"send_image(): {e}")
        error_handler.main(message.chat.id, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')


def process_text_command(command, message: Message):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º.
    :param command: str: –∫–æ–º–∞–Ω–¥–∞
    :param message: Message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if command == "art":
        image = text_to_image(message.text)
        if not image:
            error_handler.main(message, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        send_image(message, image)

    elif command == "audio":
        audio = text_to_audio(message.text)
        if not audio:
            error_handler.main(message, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ")
        send_audio(message, audio)

    else:
        error_handler.main(message, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


@bot.message_handler(commands=["TEXT"])
def main(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã TEXT.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞".
    :param message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–º–∞–Ω–¥–∞)
    """
    logger.info(f'{message.from_user.id}: /TEXT')
    send_text_options(message.from_user.id)
    bot.set_state(message.from_user.id, UserState.waiting_action_text, message.chat.id)


@bot.message_handler(state=UserState.waiting_action_text)
def waiting_action_text(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞".
    :param message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if message.text == '/start':
        bot.delete_state(message.from_user.id)
        bot.send_message(message.from_user.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º")
        return

    logger.info(f'{message.from_user.id}: waiting_action_text({message.text})')

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["command"] = message.text[1:]
    logger.info(f'{message.from_user.id}: {message.text}')

    bot.send_message(message.from_user.id, f"ü§ñ–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç (–ª–∞—Ç–∏–Ω–∏—Ü–∞)")
    bot.set_state(message.from_user.id, UserState.waiting_text, message.chat.id)


@bot.message_handler(state=UserState.waiting_text)
def waiting_text(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    :param message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    logger.info(f'{message.from_user.id}: waiting_text(text)')
    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            command = data.get("command")
            process_text_command(command, message)
    except Exception as e:
        logger.error(f'Error: {e}')
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        bot.set_state(message.from_user.id, None, message.chat.id)
        clear_uploads.main(message.from_user.id)
