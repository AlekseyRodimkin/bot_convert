from loader import bot
from states.states import UserState
from telebot.types import Message
from Exeptions.exeptions_classes import FileFormatError
import os
from utils.misc.algorithms import get_monochrome, get_noise, remove_background, format_replace
from utils.misc import clear_uploads, error_handler
from config_data.config import uploads_path
from loguru import logger


def send_image_options(user_id: int):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
    :param user_id: int: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    bot.send_message(user_id, "ü§ñ–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:\n"
                              "\n/format - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è jpg –≤ png\n"
                              "\n/back - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—èüîµ\n"
                              "\n/noisy - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞üî£\n"
                              "\n/monochrome - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–µ—Ä–Ω–æ-–±–µ–ª—É—é –ø–∞–ª–∏—Ç—Ä—Éüî≥")


def send_file(message, file_path: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    :param chat_id: int: ID —á–∞—Ç–∞
    :param file_path: str: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    :return: None
    """
    try:
        with open(file_path, 'rb') as file:
            bot.send_document(message.chat_id, file)
    except Exception as e:
        logger.error(f"send_file(file_path): {e}")
        error_handler.main(message.chat.id, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')




def process_image_command(command, save_path, new_file_path, message):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    :param command: str: –∫–æ–º–∞–Ω–¥–∞
    :param save_path: str: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    :param new_file_path: str: –ø—É—Ç—å –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    :param message: Message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if command == "monochrome" and get_monochrome(save_path, new_file_path):
        send_file(message, new_file_path)
    elif command == "noisy" and get_noise(save_path, new_file_path):
        send_file(message, new_file_path)
    elif command == "back" and remove_background(save_path, new_file_path):
        send_file(message, new_file_path)
    elif command == "format":
        result = format_replace(save_path)
        if result:
            with open(result, 'rb') as file:
                bot.send_document(message.chat.id, file)
        else:
            error_handler.main(message, "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    else:
        error_handler.main(message, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


@bot.message_handler(commands=["IMAGE"])
def main(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã IMAGE.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è".
    :param message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–º–∞–Ω–¥–∞)
    """
    logger.info(f'{message.from_user.id}: /IMAGE')
    send_image_options(message.from_user.id)
    bot.set_state(message.from_user.id, UserState.waiting_action_image, message.chat.id)


@bot.message_handler(state=UserState.waiting_action_image)
def waiting_action_image(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è".
    :param message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if message.text == '/start':
        bot.delete_state(message.from_user.id)
        bot.send_message(message.from_user.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        return

    logger.info(f'{message.from_user.id}: waiting_action_image({message.text})')

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["command"] = message.text[1:]
    logger.info(f'{message.from_user.id}: {message.text}')

    bot.send_message(message.from_user.id, f"ü§ñ–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    bot.set_state(message.from_user.id, UserState.waiting_image, message.chat.id)


@bot.message_handler(content_types=['photo'], state=UserState.waiting_image)
def waiting_image(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :param message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    file_name = file_info.file_path.split('/')[1]
    save_path = os.path.join(f'{uploads_path}/{message.from_user.id}', file_name)
    logger.info(f'{message.from_user.id}: waiting_image({file_name})')

    try:
        downloaded_file = bot.download_file(file_info.file_path)
        with open(save_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        logger.debug(f'{message.from_user.id}: {file_name}: saved')

        bot.reply_to(message, "ü§ñ–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é...")

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            command = data.get("command")
            new_file_path = os.path.join(uploads_path, str(message.from_user.id), f"{command}_{file_name}")
            process_image_command(command, save_path, new_file_path, message)

    except FileNotFoundError as e:
        logger.error(f'File not found error while saving file {file_name}: {e}')
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    except Exception as e:
        logger.error(f'Error saving file {file_name}: {e}')
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        bot.set_state(message.from_user.id, None, message.chat.id)
        clear_uploads.main(message.from_user.id)
